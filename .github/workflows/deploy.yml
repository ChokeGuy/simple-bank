name: Deploy to production

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    name: Build image
    runs-on: ubuntu-latest

    permissions:
      id-token: write   # Required for OIDC authentication
      contents: read    # Allows reading the repo

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Install kubectl
      #   uses: azure/setup-kubectl@v4
      #   with:
      #     version: 'v1.31.0' # default is latest stable
      #   id: install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4 # More information on this action can be found below in the 'AWS Credentials' section
        with:
          role-to-assume: arn:aws:iam::058264480744:role/github-ci-role
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Load secrets and save to .env on aws secrets manager
        run: aws secretsmanager get-secret-value --secret-id simple_bank --query SecretString --output text | jq -r 'to_entries|map("\(.key)=\(.value)")|.[]' > .env
      # - name: Load secrets and save to .env on github secrets
      #   run: |
      #   echo "POSTGRES_USER=${{secrets.POSTGRES_USER}}" >> .env
      #   echo "POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}}" >> .env
      #   echo "POSTGRES_URL=${{secrets.POSTGRES_URL}}" >> .env
      #   echo "POSTGRES_DB=${{secrets.POSTGRES_DB}}" >> .env
      #   echo "SERVER_ADDRESS=${{secrets.SERVER_ADDRESS}}" >> .env
      #   echo "DB_DRIVER=${{secrets.DB_DRIVER}}" >> .env
      #   echo "SYMMETRIC_KEY=${{secrets.SYMMETRIC_KEY}}" >> .env
      #   echo "ACCESS_TOKEN_DURATION=${{secrets.ACCESS_TOKEN_DURATION}}" >> .env
      #   echo "REFRESH_TOKEN_DURATION=${{secrets.REFRESH_TOKEN_DURATION}}" >> .env
      
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-bank
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest .
          docker push -a $REGISTRY/$REPOSITORY
    

      # - name: Update kubectl configuration
      #   run: aws eks --region us-east-1 update-kubeconfig --name simple-bank-2

      # - name: Configure kubectl
      #   run: |
      #     kubectl config use-context arn:aws:eks:us-east-1:058264480744:cluster/simple-bank-2
          
      # - name: Deploy image to Amazon EKS
      #   run: |
      #     kubectl apply -f eks/deployment.yaml
      #     kubectl apply -f eks/service.yaml
      #     kubectl apply -f eks/issuer.yaml
      #     kubectl apply -f eks/ingress-controller.yaml
      #     kubectl apply -f eks/ingress.yaml
      
      - name: Deploy image to to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ubuntu
          KEY_SECRET: ${{ secrets.EC2_SSH_KEY }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: simple-bank
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "$KEY_SECRET" > private_key.pem
          chmod 400 private_key.pem

          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST << 'EOF'
            export REGISTRY="${{ steps.login-ecr.outputs.registry }}"
            export REPOSITORY="simple-bank"
            export IMAGE_TAG="${{ github.sha }}"

            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $REGISTRY
            docker pull $REGISTRY/$REPOSITORY:$IMAGE_TAG
            docker stop simple-bank || true
            docker rm simple-bank || true
            docker run -d --name simple-bank -p 8080:8080 $REGISTRY/$REPOSITORY:$IMAGE_TAG
          EOF

          rm private_key.pem