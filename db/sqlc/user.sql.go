// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO
    users (username,hashed_password,full_name,email)
VALUES ($1, $2, $3, $4) RETURNING username, hashed_password, full_name, email, created_at, password_changed_at, is_email_verified
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	FullName       string `json:"full_name"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT 
    username,
    hashed_password,
    full_name,
    email,
    is_email_verified,
    password_changed_at,
    created_at
FROM 
    users
WHERE 
    username = $1
`

type GetUserByUserNameRow struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	FullName          string    `json:"full_name"`
	Email             string    `json:"email"`
	IsEmailVerified   bool      `json:"is_email_verified"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
	CreatedAt         time.Time `json:"created_at"`
}

func (q *Queries) GetUserByUserName(ctx context.Context, username string) (GetUserByUserNameRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, username)
	var i GetUserByUserNameRow
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.IsEmailVerified,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE 
    users
SET
    hashed_password = COALESCE($1, hashed_password),
    is_email_verified = COALESCE($2, is_email_verified),
    full_name = COALESCE($3, full_name),
    email = COALESCE($4, email)
WHERE
    username = $5
RETURNING username, hashed_password, full_name, email, created_at, password_changed_at, is_email_verified
`

type UpdateUserParams struct {
	HashedPassword  sql.NullString `json:"hashed_password"`
	IsEmailVerified sql.NullBool   `json:"is_email_verified"`
	FullName        sql.NullString `json:"full_name"`
	Email           sql.NullString `json:"email"`
	Username        string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.HashedPassword,
		arg.IsEmailVerified,
		arg.FullName,
		arg.Email,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.CreatedAt,
		&i.PasswordChangedAt,
		&i.IsEmailVerified,
	)
	return i, err
}
