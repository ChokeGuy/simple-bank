// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: transfer.sql

package sqlc

import (
	"context"
	"time"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO
    transfers (from_account_id, to_account_id, amount)
VALUES
    ($1, $2, $3)
RETURNING id, from_account_id, to_account_id, amount, created_at
`

type CreateTransferParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
	Amount        int64 `json:"amount"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRowContext(ctx, createTransfer, arg.FromAccountID, arg.ToAccountID, arg.Amount)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const getTransfers = `-- name: GetTransfers :many
SELECT
    from_account_id,
    to_account_id,
    amount,
    created_at
FROM
    transfers
WHERE
    from_account_id = $1 AND to_account_id = $2
ORDER BY
    created_at DESC
`

type GetTransfersParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
}

type GetTransfersRow struct {
	FromAccountID int64     `json:"from_account_id"`
	ToAccountID   int64     `json:"to_account_id"`
	Amount        int64     `json:"amount"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) GetTransfers(ctx context.Context, arg GetTransfersParams) ([]GetTransfersRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransfers, arg.FromAccountID, arg.ToAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTransfersRow{}
	for rows.Next() {
		var i GetTransfersRow
		if err := rows.Scan(
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByFromAccountId = `-- name: GetTransfersByFromAccountId :many
SELECT
    from_account_id,
    to_account_id,
    amount,
    created_at
FROM
    transfers
WHERE
    from_account_id = $1
ORDER BY
    created_at DESC
`

type GetTransfersByFromAccountIdRow struct {
	FromAccountID int64     `json:"from_account_id"`
	ToAccountID   int64     `json:"to_account_id"`
	Amount        int64     `json:"amount"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) GetTransfersByFromAccountId(ctx context.Context, fromAccountID int64) ([]GetTransfersByFromAccountIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByFromAccountId, fromAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTransfersByFromAccountIdRow{}
	for rows.Next() {
		var i GetTransfersByFromAccountIdRow
		if err := rows.Scan(
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransfersByToAccountId = `-- name: GetTransfersByToAccountId :many
SELECT
    from_account_id,
    to_account_id,
    amount,
    created_at
FROM
    transfers
WHERE
    to_account_id = $1
ORDER BY
    created_at DESC
`

type GetTransfersByToAccountIdRow struct {
	FromAccountID int64     `json:"from_account_id"`
	ToAccountID   int64     `json:"to_account_id"`
	Amount        int64     `json:"amount"`
	CreatedAt     time.Time `json:"created_at"`
}

func (q *Queries) GetTransfersByToAccountId(ctx context.Context, toAccountID int64) ([]GetTransfersByToAccountIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransfersByToAccountId, toAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetTransfersByToAccountIdRow{}
	for rows.Next() {
		var i GetTransfersByToAccountIdRow
		if err := rows.Scan(
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
